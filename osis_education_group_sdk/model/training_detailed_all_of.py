"""
    Education Group Service

    A set of API endpoints that allow you to get, update, delete an education group.  # noqa: E501

    The version of the OpenAPI document: 1.12
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from osis_education_group_sdk.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from osis_education_group_sdk.exceptions import ApiAttributeError


def lazy_import():
    from osis_education_group_sdk.model.academic_type_enum import AcademicTypeEnum
    from osis_education_group_sdk.model.active_enum import ActiveEnum
    from osis_education_group_sdk.model.activity_presence_enum import ActivityPresenceEnum
    from osis_education_group_sdk.model.array_of_versions import ArrayOfVersions
    from osis_education_group_sdk.model.campus import Campus
    from osis_education_group_sdk.model.constraint_type_enum import ConstraintTypeEnum
    from osis_education_group_sdk.model.decree_category_enum import DecreeCategoryEnum
    from osis_education_group_sdk.model.duration_unit_enum import DurationUnitEnum
    from osis_education_group_sdk.model.internship_presence_enum import InternshipPresenceEnum
    from osis_education_group_sdk.model.print_orientation_enum import PrintOrientationEnum
    from osis_education_group_sdk.model.rate_code_enum import RateCodeEnum
    from osis_education_group_sdk.model.schedule_type_enum import ScheduleTypeEnum
    globals()['AcademicTypeEnum'] = AcademicTypeEnum
    globals()['ActiveEnum'] = ActiveEnum
    globals()['ActivityPresenceEnum'] = ActivityPresenceEnum
    globals()['ArrayOfVersions'] = ArrayOfVersions
    globals()['Campus'] = Campus
    globals()['ConstraintTypeEnum'] = ConstraintTypeEnum
    globals()['DecreeCategoryEnum'] = DecreeCategoryEnum
    globals()['DurationUnitEnum'] = DurationUnitEnum
    globals()['InternshipPresenceEnum'] = InternshipPresenceEnum
    globals()['PrintOrientationEnum'] = PrintOrientationEnum
    globals()['RateCodeEnum'] = RateCodeEnum
    globals()['ScheduleTypeEnum'] = ScheduleTypeEnum


class TrainingDetailedAllOf(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('duration',): {
            'inclusive_minimum': 1,
        },
        ('credits',): {
            'inclusive_minimum': 0,
        },
        ('min_constraint',): {
            'inclusive_minimum': 1,
        },
        ('max_constraint',): {
            'inclusive_minimum': 1,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'active': (ActiveEnum,),  # noqa: E501
            'active_text': (str,),  # noqa: E501
            'partial_deliberation': (bool,),  # noqa: E501
            'admission_exam': (bool,),  # noqa: E501
            'funding': (bool,),  # noqa: E501
            'funding_direction': (str,),  # noqa: E501
            'funding_cud': (bool,),  # noqa: E501
            'funding_direction_cud': (str,),  # noqa: E501
            'academic_type': (AcademicTypeEnum,),  # noqa: E501
            'academic_type_text': (str, none_type,),  # noqa: E501
            'university_certificate': (bool,),  # noqa: E501
            'enrollment_campus': (Campus,),  # noqa: E501
            'main_teaching_campus': (Campus,),  # noqa: E501
            'dissertation': (bool,),  # noqa: E501
            'internship': (InternshipPresenceEnum,),  # noqa: E501
            'internship_text': (str, none_type,),  # noqa: E501
            'schedule_type': (ScheduleTypeEnum,),  # noqa: E501
            'schedule_type_text': (str,),  # noqa: E501
            'english_activities': (ActivityPresenceEnum,),  # noqa: E501
            'english_activities_text': (str, none_type,),  # noqa: E501
            'other_language_activities': (ActivityPresenceEnum,),  # noqa: E501
            'other_language_activities_text': (str, none_type,),  # noqa: E501
            'other_campus_activities': (ActivityPresenceEnum,),  # noqa: E501
            'other_campus_activities_text': (str, none_type,),  # noqa: E501
            'professional_title': (str,),  # noqa: E501
            'joint_diploma': (bool,),  # noqa: E501
            'diploma_printing_orientation': (PrintOrientationEnum,),  # noqa: E501
            'diploma_printing_orientation_text': (str, none_type,),  # noqa: E501
            'language_association_text': (str, none_type,),  # noqa: E501
            'diploma_printing_title': (str,),  # noqa: E501
            'inter_organization_information': (str,),  # noqa: E501
            'inter_university_french_community': (bool,),  # noqa: E501
            'inter_university_belgium': (bool,),  # noqa: E501
            'inter_university_abroad': (bool,),  # noqa: E501
            'primary_language': (str, none_type,),  # noqa: E501
            'keywords': (str,),  # noqa: E501
            'duration': (int, none_type,),  # noqa: E501
            'duration_unit': (DurationUnitEnum,),  # noqa: E501
            'duration_unit_text': (str, none_type,),  # noqa: E501
            'enrollment_enabled': (bool,),  # noqa: E501
            'credits': (int, none_type,),  # noqa: E501
            'remark': (str,),  # noqa: E501
            'remark_en': (str,),  # noqa: E501
            'min_constraint': (int, none_type,),  # noqa: E501
            'max_constraint': (int, none_type,),  # noqa: E501
            'constraint_type': (ConstraintTypeEnum,),  # noqa: E501
            'constraint_type_text': (str, none_type,),  # noqa: E501
            'weighting': (bool,),  # noqa: E501
            'default_learning_unit_enrollment': (bool,),  # noqa: E501
            'decree_category': (DecreeCategoryEnum,),  # noqa: E501
            'decree_category_text': (str, none_type,),  # noqa: E501
            'rate_code': (RateCodeEnum,),  # noqa: E501
            'rate_code_text': (str, none_type,),  # noqa: E501
            'internal_comment': (str,),  # noqa: E501
            'co_graduation': (str, none_type,),  # noqa: E501
            'co_graduation_coefficient': (float, none_type,),  # noqa: E501
            'web_re_registration': (bool,),  # noqa: E501
            'domain_name': (str, none_type,),  # noqa: E501
            'domain_code': (str, none_type,),  # noqa: E501
            'version_name': (str,),  # noqa: E501
            'transition_name': (str,),  # noqa: E501
            'versions': (ArrayOfVersions,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'active': 'active',  # noqa: E501
        'active_text': 'active_text',  # noqa: E501
        'partial_deliberation': 'partial_deliberation',  # noqa: E501
        'admission_exam': 'admission_exam',  # noqa: E501
        'funding': 'funding',  # noqa: E501
        'funding_direction': 'funding_direction',  # noqa: E501
        'funding_cud': 'funding_cud',  # noqa: E501
        'funding_direction_cud': 'funding_direction_cud',  # noqa: E501
        'academic_type': 'academic_type',  # noqa: E501
        'academic_type_text': 'academic_type_text',  # noqa: E501
        'university_certificate': 'university_certificate',  # noqa: E501
        'enrollment_campus': 'enrollment_campus',  # noqa: E501
        'main_teaching_campus': 'main_teaching_campus',  # noqa: E501
        'dissertation': 'dissertation',  # noqa: E501
        'internship': 'internship',  # noqa: E501
        'internship_text': 'internship_text',  # noqa: E501
        'schedule_type': 'schedule_type',  # noqa: E501
        'schedule_type_text': 'schedule_type_text',  # noqa: E501
        'english_activities': 'english_activities',  # noqa: E501
        'english_activities_text': 'english_activities_text',  # noqa: E501
        'other_language_activities': 'other_language_activities',  # noqa: E501
        'other_language_activities_text': 'other_language_activities_text',  # noqa: E501
        'other_campus_activities': 'other_campus_activities',  # noqa: E501
        'other_campus_activities_text': 'other_campus_activities_text',  # noqa: E501
        'professional_title': 'professional_title',  # noqa: E501
        'joint_diploma': 'joint_diploma',  # noqa: E501
        'diploma_printing_orientation': 'diploma_printing_orientation',  # noqa: E501
        'diploma_printing_orientation_text': 'diploma_printing_orientation_text',  # noqa: E501
        'language_association_text': 'language_association_text',  # noqa: E501
        'diploma_printing_title': 'diploma_printing_title',  # noqa: E501
        'inter_organization_information': 'inter_organization_information',  # noqa: E501
        'inter_university_french_community': 'inter_university_french_community',  # noqa: E501
        'inter_university_belgium': 'inter_university_belgium',  # noqa: E501
        'inter_university_abroad': 'inter_university_abroad',  # noqa: E501
        'primary_language': 'primary_language',  # noqa: E501
        'keywords': 'keywords',  # noqa: E501
        'duration': 'duration',  # noqa: E501
        'duration_unit': 'duration_unit',  # noqa: E501
        'duration_unit_text': 'duration_unit_text',  # noqa: E501
        'enrollment_enabled': 'enrollment_enabled',  # noqa: E501
        'credits': 'credits',  # noqa: E501
        'remark': 'remark',  # noqa: E501
        'remark_en': 'remark_en',  # noqa: E501
        'min_constraint': 'min_constraint',  # noqa: E501
        'max_constraint': 'max_constraint',  # noqa: E501
        'constraint_type': 'constraint_type',  # noqa: E501
        'constraint_type_text': 'constraint_type_text',  # noqa: E501
        'weighting': 'weighting',  # noqa: E501
        'default_learning_unit_enrollment': 'default_learning_unit_enrollment',  # noqa: E501
        'decree_category': 'decree_category',  # noqa: E501
        'decree_category_text': 'decree_category_text',  # noqa: E501
        'rate_code': 'rate_code',  # noqa: E501
        'rate_code_text': 'rate_code_text',  # noqa: E501
        'internal_comment': 'internal_comment',  # noqa: E501
        'co_graduation': 'co_graduation',  # noqa: E501
        'co_graduation_coefficient': 'co_graduation_coefficient',  # noqa: E501
        'web_re_registration': 'web_re_registration',  # noqa: E501
        'domain_name': 'domain_name',  # noqa: E501
        'domain_code': 'domain_code',  # noqa: E501
        'version_name': 'version_name',  # noqa: E501
        'transition_name': 'transition_name',  # noqa: E501
        'versions': 'versions',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """TrainingDetailedAllOf - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            active (ActiveEnum): [optional]  # noqa: E501
            active_text (str): [optional]  # noqa: E501
            partial_deliberation (bool): [optional]  # noqa: E501
            admission_exam (bool): [optional]  # noqa: E501
            funding (bool): [optional]  # noqa: E501
            funding_direction (str): [optional]  # noqa: E501
            funding_cud (bool): [optional]  # noqa: E501
            funding_direction_cud (str): [optional]  # noqa: E501
            academic_type (AcademicTypeEnum): [optional]  # noqa: E501
            academic_type_text (str, none_type): [optional]  # noqa: E501
            university_certificate (bool): [optional]  # noqa: E501
            enrollment_campus (Campus): [optional]  # noqa: E501
            main_teaching_campus (Campus): [optional]  # noqa: E501
            dissertation (bool): [optional]  # noqa: E501
            internship (InternshipPresenceEnum): [optional]  # noqa: E501
            internship_text (str, none_type): [optional]  # noqa: E501
            schedule_type (ScheduleTypeEnum): [optional]  # noqa: E501
            schedule_type_text (str): [optional]  # noqa: E501
            english_activities (ActivityPresenceEnum): [optional]  # noqa: E501
            english_activities_text (str, none_type): [optional]  # noqa: E501
            other_language_activities (ActivityPresenceEnum): [optional]  # noqa: E501
            other_language_activities_text (str, none_type): [optional]  # noqa: E501
            other_campus_activities (ActivityPresenceEnum): [optional]  # noqa: E501
            other_campus_activities_text (str, none_type): [optional]  # noqa: E501
            professional_title (str): [optional]  # noqa: E501
            joint_diploma (bool): [optional]  # noqa: E501
            diploma_printing_orientation (PrintOrientationEnum): [optional]  # noqa: E501
            diploma_printing_orientation_text (str, none_type): [optional]  # noqa: E501
            language_association_text (str, none_type): [optional]  # noqa: E501
            diploma_printing_title (str): [optional]  # noqa: E501
            inter_organization_information (str): [optional]  # noqa: E501
            inter_university_french_community (bool): [optional]  # noqa: E501
            inter_university_belgium (bool): [optional]  # noqa: E501
            inter_university_abroad (bool): [optional]  # noqa: E501
            primary_language (str, none_type): The language code according to ISO 639-1 specification (https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) . [optional]  # noqa: E501
            keywords (str): [optional]  # noqa: E501
            duration (int, none_type): [optional]  # noqa: E501
            duration_unit (DurationUnitEnum): [optional]  # noqa: E501
            duration_unit_text (str, none_type): [optional]  # noqa: E501
            enrollment_enabled (bool): [optional]  # noqa: E501
            credits (int, none_type): [optional]  # noqa: E501
            remark (str): [optional]  # noqa: E501
            remark_en (str): [optional]  # noqa: E501
            min_constraint (int, none_type): [optional]  # noqa: E501
            max_constraint (int, none_type): [optional]  # noqa: E501
            constraint_type (ConstraintTypeEnum): [optional]  # noqa: E501
            constraint_type_text (str, none_type): [optional]  # noqa: E501
            weighting (bool): [optional]  # noqa: E501
            default_learning_unit_enrollment (bool): [optional]  # noqa: E501
            decree_category (DecreeCategoryEnum): [optional]  # noqa: E501
            decree_category_text (str, none_type): [optional]  # noqa: E501
            rate_code (RateCodeEnum): [optional]  # noqa: E501
            rate_code_text (str, none_type): [optional]  # noqa: E501
            internal_comment (str): [optional]  # noqa: E501
            co_graduation (str, none_type): [optional]  # noqa: E501
            co_graduation_coefficient (float, none_type): [optional]  # noqa: E501
            web_re_registration (bool): [optional]  # noqa: E501
            domain_name (str, none_type): [optional]  # noqa: E501
            domain_code (str, none_type): [optional]  # noqa: E501
            version_name (str): [optional]  # noqa: E501
            transition_name (str): [optional]  # noqa: E501
            versions (ArrayOfVersions): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """TrainingDetailedAllOf - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            active (ActiveEnum): [optional]  # noqa: E501
            active_text (str): [optional]  # noqa: E501
            partial_deliberation (bool): [optional]  # noqa: E501
            admission_exam (bool): [optional]  # noqa: E501
            funding (bool): [optional]  # noqa: E501
            funding_direction (str): [optional]  # noqa: E501
            funding_cud (bool): [optional]  # noqa: E501
            funding_direction_cud (str): [optional]  # noqa: E501
            academic_type (AcademicTypeEnum): [optional]  # noqa: E501
            academic_type_text (str, none_type): [optional]  # noqa: E501
            university_certificate (bool): [optional]  # noqa: E501
            enrollment_campus (Campus): [optional]  # noqa: E501
            main_teaching_campus (Campus): [optional]  # noqa: E501
            dissertation (bool): [optional]  # noqa: E501
            internship (InternshipPresenceEnum): [optional]  # noqa: E501
            internship_text (str, none_type): [optional]  # noqa: E501
            schedule_type (ScheduleTypeEnum): [optional]  # noqa: E501
            schedule_type_text (str): [optional]  # noqa: E501
            english_activities (ActivityPresenceEnum): [optional]  # noqa: E501
            english_activities_text (str, none_type): [optional]  # noqa: E501
            other_language_activities (ActivityPresenceEnum): [optional]  # noqa: E501
            other_language_activities_text (str, none_type): [optional]  # noqa: E501
            other_campus_activities (ActivityPresenceEnum): [optional]  # noqa: E501
            other_campus_activities_text (str, none_type): [optional]  # noqa: E501
            professional_title (str): [optional]  # noqa: E501
            joint_diploma (bool): [optional]  # noqa: E501
            diploma_printing_orientation (PrintOrientationEnum): [optional]  # noqa: E501
            diploma_printing_orientation_text (str, none_type): [optional]  # noqa: E501
            language_association_text (str, none_type): [optional]  # noqa: E501
            diploma_printing_title (str): [optional]  # noqa: E501
            inter_organization_information (str): [optional]  # noqa: E501
            inter_university_french_community (bool): [optional]  # noqa: E501
            inter_university_belgium (bool): [optional]  # noqa: E501
            inter_university_abroad (bool): [optional]  # noqa: E501
            primary_language (str, none_type): The language code according to ISO 639-1 specification (https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) . [optional]  # noqa: E501
            keywords (str): [optional]  # noqa: E501
            duration (int, none_type): [optional]  # noqa: E501
            duration_unit (DurationUnitEnum): [optional]  # noqa: E501
            duration_unit_text (str, none_type): [optional]  # noqa: E501
            enrollment_enabled (bool): [optional]  # noqa: E501
            credits (int, none_type): [optional]  # noqa: E501
            remark (str): [optional]  # noqa: E501
            remark_en (str): [optional]  # noqa: E501
            min_constraint (int, none_type): [optional]  # noqa: E501
            max_constraint (int, none_type): [optional]  # noqa: E501
            constraint_type (ConstraintTypeEnum): [optional]  # noqa: E501
            constraint_type_text (str, none_type): [optional]  # noqa: E501
            weighting (bool): [optional]  # noqa: E501
            default_learning_unit_enrollment (bool): [optional]  # noqa: E501
            decree_category (DecreeCategoryEnum): [optional]  # noqa: E501
            decree_category_text (str, none_type): [optional]  # noqa: E501
            rate_code (RateCodeEnum): [optional]  # noqa: E501
            rate_code_text (str, none_type): [optional]  # noqa: E501
            internal_comment (str): [optional]  # noqa: E501
            co_graduation (str, none_type): [optional]  # noqa: E501
            co_graduation_coefficient (float, none_type): [optional]  # noqa: E501
            web_re_registration (bool): [optional]  # noqa: E501
            domain_name (str, none_type): [optional]  # noqa: E501
            domain_code (str, none_type): [optional]  # noqa: E501
            version_name (str): [optional]  # noqa: E501
            transition_name (str): [optional]  # noqa: E501
            versions (ArrayOfVersions): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
